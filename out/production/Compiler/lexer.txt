INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21101036\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 20
RBRACK ]
SEMICN ;
INTTK int
IDENFR arr2
LBRACK [
INTCON 20
RBRACK ]
SEMICN ;
INTTK int
IDENFR a
SEMICN ;
INTTK int
IDENFR result
ASSIGN =
INTCON 0
SEMICN ;
IDENFR a
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a = %d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR a
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR arr1
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR x
MULT *
INTCON 2
DIV /
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR a
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR arr2
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR x
MULT *
INTCON 2
DIV /
INTCON 2
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR a
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR result
ASSIGN =
IDENFR result
PLUS +
LPARENT (
IDENFR arr1
LBRACK [
IDENFR i
RBRACK ]
MULT *
IDENFR arr2
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
LBRACE {
INTTK int
IDENFR result
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "result = %d\n"
COMMA ,
IDENFR result
RPARENT )
SEMICN ;
RBRACE }
LBRACE {
IFTK if
LPARENT (
INTCON 1
NEQ !=
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "result = %d\n"
COMMA ,
IDENFR result
MOD %
INTCON 10
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 2
GRE >
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "result = %d\n"
COMMA ,
IDENFR result
MOD %
INTCON 20
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "compile error!\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
PLUS +
INTCON 5
GRE >
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "result = %d\n"
COMMA ,
IDENFR result
MOD %
INTCON 40
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
MINU -
INTCON 6
LSS <
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "result = %d\n"
COMMA ,
IDENFR result
MOD %
INTCON 80
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "result = %d\n"
COMMA ,
IDENFR result
MOD %
INTCON 3
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "result = %d\n"
COMMA ,
IDENFR result
MOD %
INTCON 7
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "result = %d\n"
COMMA ,
IDENFR result
RPARENT )
SEMICN ;
CHRCON '\"'
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
